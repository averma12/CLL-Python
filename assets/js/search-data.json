{
  
    
        "post0": {
            "title": "Regular Expressions",
            "content": "Introduction . Regex or regular expressions is in many ways a language within a language. It has its own syntax. It is used extensively in pattern matching. Many programmers make one of two mistakes regarding regex , either they overuse it on every problem or they completely steer clear of it. To be honest , I&#39;m not a fan of regexes. But as a machine learning engineer, you also need to spend a lot of work analyzing and cleaning the data to find patterns on it. You even need to scrape data from sites sometimes. These are places where knowledge of regular expressions comes in handy. So hopefully, this blog of my notes on learning regex can help a novice to navigate the complex world of regex. Even if your job doesn&#39;t involve working with data everyday, you will come across some regex code written by someone else , hence a knowledge of regex is vital. . There are a ton of libraries that also use regex for extracting patterns like urls from text. I&#39;ve used some and they also come in handy , so I&#39;ll cover a couple of them here as well. . Basic regex using inbuilt functions . Python has an inbuilt library re for handling regex operations. But even before that , there are a lot of ways you can match simple patterns using the basic functionality of strings and numbers . s = &#39;foo123bar&#39; . Now you need to find if the word string foo exists within s. Strings in python have this unique property of being iterable over its individual characters. You can also find a continuous pattern using the in property. . &quot;foo&quot; in s . True . s.find(&quot;foo&quot;) #This gives the starting index of the pattern . 0 . s.find(&quot;123&quot;) . 3 . Let&#39;s also check for phone numbers now. . You have different strings of phone numbers . phone1 = &quot;022-64519300&quot; phone2 = &quot;+919820481234&quot; not_phone1 = &quot;101 Howard&quot; . import string . string.digits . &#39;0123456789&#39; . def check_phone(inp): valid_chars = string.digits + &#39; -()+&#39; for char in inp: if char not in valid_chars: return False return True . check_phone(phone1) . True . check_phone(phone2) . True . check_phone(not_phone1) . False . Above we defined a custom function which iterates over all characters in string and checks if it matches the valid characters that are usually present in phone numbers . Enter the Regex . Now there&#39;s a lot of simple use cases like the one above that can be solved without using regex , however the more complex the problem becomes simple string pattern matching can fail. . One really useful to get started in regex is this link https://regexone.com/ . import re #import the re module for handling regular expressions in python . s1,s2,s3,s4,s5,s6 = &quot;can&quot;,&quot;fan&quot;,&quot;man&quot;,&quot;dan&quot;,&quot;ran&quot;,&quot;pan&quot; . s1 . &#39;can&#39; . Now we need to match the first 3 strings without matching the last 3. So if we look at the strings we can see a pattern. The string &#39;an&#39; is common across all strings but the letters c,f,m are only present in the first 3 strings. There is a method for matching specific characters using regular expressions, by defining them inside square brackets. For example, the pattern [abc] will only match a single a, b, or c letter and nothing else. . Let&#39;s use the search function in the re module to search for the particular patterns we want . In python if you want to search for patterns either you can write the string or enclose the pattern inside the r&quot;&quot; expression. This tells to python to search for this pattern. If the search finds a pattern it returns a Match object which is truthy object and tells if the match is found or not . re.search(r&quot;[&#39;cfm&#39;]&quot;,s1) # pattern searches if a string contains either c or f or m in the strinv . &lt;re.Match object; span=(0, 1), match=&#39;c&#39;&gt; . re.search(r&quot;[&#39;cfm&#39;]&quot;,s2) . &lt;re.Match object; span=(0, 1), match=&#39;f&#39;&gt; . re.search(r&quot;[&#39;cfm&#39;]&quot;,s6) # No match found hence nothing returned . re.search(r&quot;[&#39;cfm&#39;]an&quot;,s1) # You can also search for the pattern of either c or f or m along with an . &lt;re.Match object; span=(0, 3), match=&#39;can&#39;&gt; . Excluding specific characters . In some cases, we might know that there are specific characters that we don&#39;t want to match. To represent this, we use a similar expression that excludes specific characters using the square brackets and the ^ (hat). For example, the pattern [^abc] will match any single character except for the letters a, b, or c. . So if we take a look at the previous problem. We can reframe it as finding strings which do not have d,r or p . re.search(r&quot;[^&#39;drp&#39;]an&quot;,s2) # s2 does not have either of the 3 characters . &lt;re.Match object; span=(0, 3), match=&#39;fan&#39;&gt; . Multiple matches . Suppose we want to match a set of characters. Can be any letter but it has to occur atleast 3-5 times in a text. For e.g you want to find patterns where people speak in a casual slang like wasssuppp . One way to check for multiple occurences is using the square brackets method we used earlier. Just keep repeating it as many times as you want so for e.g . re.search(r&quot;[z][z][z]&quot;,&quot;Wazzzup&quot;) # search for mutliple occurences of uppercase or lowercase characters . &lt;re.Match object; span=(2, 5), match=&#39;zzz&#39;&gt; . But honestly , how many times can you keep repeating this ? So regex provides a way out you can enclose a curly bracket where you specify a range which explains how many matches are you looking for . re.search(r&quot;[z]{2,5}&quot;,&quot;Wazzzup&quot;) # we are searching for multiple occurences of z between 2 and 5 times . &lt;re.Match object; span=(2, 5), match=&#39;zzz&#39;&gt; . Regex metacharacters . Now Regex has a ton of metacharacters. What are metacharacters? Well, how do I put it in laymans terms. They are characters that are useful in regex for finding patterns. They look similar to characters in python except that their meaning completely changes. Now this isn&#39;t the most technical definition that you&#39;ll find. For that , there are other blogs that have defined it better. I&#39;ll link them below. But more than definitions let&#39;s just start looking at some examples .",
            "url": "https://averma12.github.io/CLL-Python/jupyter/2020/06/27/Regular-Expressions.html",
            "relUrl": "/jupyter/2020/06/27/Regular-Expressions.html",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Classes a deep dive",
            "content": "Introduction . Hey guys, Welcome to the Python tutorial series . In this part we will take a deep dive into one of the most important topics in many programming languages OOPs or Object Oriented Programming. This tutorial assumes you know about earlier structures in Python like Lists,Tuples,Dictionaries,Functions etc. A lot of the terms like Classes,Inheritance,Objects are very familiar in a variety of programming languages. These are the key terms used in Object Oriented Programming. So let&#39;s take a look at them . Classes and Objects . We&#39;ve read about dictionaries, how they can persist data in a python program . A dictionary works by storing values in a key value pair {&quot;name&quot;:&quot;Abhinav&quot;,&quot;age&quot;:30} . The name Abhinav is persisted as long as this dictionary persists. We can also create another dictionary with same key. {&quot;name&quot;:&quot;Anthony&quot;,&quot;age&quot;:23}. These are 2 separate instances of a dictionary which hold 2 separate values. Why 2 ?. Because each dictionary is logically a different group. Abhinav and Anthony are 2 separate entities or people in real life. But what if we wanted to store more than just some key value pairs. What if we wanted to put functions in there . Like if you wanted to return a string which contains their name and age instead of creating another key in a dictionary a function would be more appropriate . The function should also be able to refer the name and age like an internal state. This is where the limitations of the dictionary become apparent. We would need something bigger. Classes help here. Classes help you group attributes like name along with functions and much more. Classes help you take your programming skills to the next level and help you write some complex libraries that can solve some really challenging tasks. So let&#39;s take a deep dive in classes . PS - The dictionaries you saw above were instances of the class Dictionary in Python . So what is a class? . A class is a blueprint, a model that stores attributes like name and age you saw above and behaviour/methods functions that do transformations on attributes and much more . In Python we create classes using the class keyword. . class Person: pass . We can assign some attributes to it . class Person: def __init__(self,name_entered,age_entered): self.name = name_entered self.age = age_entered . An object is an instance of a class. An instance represents a specific concrete example of a class. . p = Person(&quot;Abhinav&quot;,&quot;30&quot;) . p.name,p.age . (&#39;Abhinav&#39;, &#39;30&#39;) . p_dict = dict() . p_dict[&quot;name&quot;] = &quot;Abhinav&quot; . p_dict[&quot;age&quot;] = 30 . p_dict . {&#39;name&#39;: &#39;Abhinav&#39;, &#39;age&#39;: 30} . As you can see a dictionary is an instance of dict class which basically does a similar job with respect to persisting attributes. Classes have many inbuilt methods that are passed onto the objects.You can view them by using the dir function in Python . dir(p) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;age&#39;, &#39;name&#39;] . As you can see at the bottom we have the 2 attributes we declared. If you look at the list you will see some attributes witb or dunders on both sides. These are special attributes. These are specific to a class. Normally we don&#39;t use all. We use init__ to initialize attributes of an instance. We can also declare our own methods.Methods are functions that are specific to a class. . p.__dict__ # this lists the attributes as a dict not to dissimilar to the dict above . {&#39;name&#39;: &#39;Abhinav&#39;, &#39;age&#39;: 30} . p.__dict__ == p_dict . True . Class Attributes and Instance Attributes . What you saw above were examples of instance attributes. Instance attributes are attributes that are specific to the class instance . Their value changes with different instances. The other attributes like the ones you saw above are class attributes. These are built-in to the class. for e.g name is a class attribute. We can also add our own custom class attributes . class Program: language = &#39;Python&#39; version = &#39;3.7&#39; . Program.__name__ . &#39;Program&#39; . Program.language . &#39;Python&#39; . # We can set class attributes using the dot notation Program.language = &quot;Swift&quot; . Program.language . &#39;Swift&#39; . But we can also use the functions getattr and setattr to read and write these attributes . getattr(Program, &#39;version&#39;) . &#39;3.7&#39; . setattr(Program, &#39;version&#39;, &#39;3.6&#39;) . Program.version, getattr(Program, &#39;version&#39;) . (&#39;3.6&#39;, &#39;3.6&#39;) . Since Python is a dynamic attribute we can dynamically set the property at run time itself . Program.x = 100 . Program.x, getattr(Program, &#39;x&#39;) . (100, 100) . setattr(Program, &#39;y&#39;, 200) # We could also use setattr directly . Program.y, getattr(Program, &#39;y&#39;) . (200, 200) . Program.__dict__ . mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;language&#39;: &#39;Swift&#39;, &#39;version&#39;: &#39;3.6&#39;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Program&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Program&#39; objects&gt;, &#39;__doc__&#39;: None, &#39;y&#39;: 200, &#39;x&#39;: 100}) . Now earlier I had said that every class has a dict attribute which is a dictionary. I was partially correct. It is a read-only dictionary . More like a mappingproxy . Deleting Attributes . Use del or delattr to delete attributes . del Program.x . Program.__dict__ #x is now deleted . mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;language&#39;: &#39;Swift&#39;, &#39;version&#39;: &#39;3.6&#39;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Program&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Program&#39; objects&gt;, &#39;__doc__&#39;: None, &#39;y&#39;: 200}) . Since dict attribute of a class is a read only dictionary. We can also Access the attributes like we do dictionary keys . Program.__dict__[&#39;language&#39;] . &#39;Swift&#39; . list(Program.__dict__.items()) . [(&#39;__module__&#39;, &#39;__main__&#39;), (&#39;language&#39;, &#39;Swift&#39;), (&#39;version&#39;, &#39;3.6&#39;), (&#39;__dict__&#39;, &lt;attribute &#39;__dict__&#39; of &#39;Program&#39; objects&gt;), (&#39;__weakref__&#39;, &lt;attribute &#39;__weakref__&#39; of &#39;Program&#39; objects&gt;), (&#39;__doc__&#39;, None), (&#39;y&#39;, 200)] . The name attribute isn&#39;t stored in the class dictionary For the instance to access the name of a class, it has to work its way upward with Program().class.name. . Program.__class__.__name__ # Every program is an instance of a superclass type . &#39;type&#39; . Program().__class__.__name__ # this is an instance of class Program . &#39;Program&#39; . The last part can be tricky to understand. You&#39;ll get more clarity on this once the topic of Metaclasses is reached . class BankAccount: apr = 1.2 . Class attributes are attributes that live inside the class. apr over here is a class attribute . BankAccount.apr . 1.2 . Now when we create instances of that class: . acc_1 = BankAccount() acc_2 = BankAccount() . acc_1.apr,acc_2.apr . (1.2, 1.2) . acc_1.__dict__, acc_2.__dict__ . ({}, {}) . However the objects have the apr attribute . acc_1.apr, acc_2.apr . (1.2, 1.2) . BankAccount.apr = 2.5 #Now we modify the value of BankAccount&#39;s apr attribute . acc_1.apr, acc_2.apr #Et vóila! . (2.5, 2.5) . Let&#39;s dynamically add a class attribute . BankAccount.account_type = &#39;Savings&#39; . acc_1.account_type . &#39;Savings&#39; . Instance attributes on the other hand are specific to the object . acc_1.account_type = &quot;None, Job loss due to Covid&quot; . acc_1.account_type,acc_2.account_type . (&#39;None, Job loss due to Covid&#39;, &#39;Savings&#39;) . BankAccount.account_type . &#39;Savings&#39; . References . https://github.com/fbaptiste/python-deepdive - He has an excellent series of courses on Udemy which I would recommend | https://realpython.com/python3-object-oriented-programming/ Real Python is one of the best sites available to learn Python Programming . Their articles and blogs and video courses are well researched and really good for all levels of Python Programmers |",
            "url": "https://averma12.github.io/CLL-Python/jupyter/2020/06/27/Classes.html",
            "relUrl": "/jupyter/2020/06/27/Classes.html",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Classes a deep dive: Callables and Methods",
            "content": "What are callables and methods? . Basically a callable is a function. Anything that can be called :P is a callable. Methods are functions defined inside a class that have specific behaviours according to the class blueprint. . Class attributes can be any object type, including callables such as functions: . class Program: language = &#39;Python&#39; def say_hello(): print(f&#39;Hello from {Program.language}!&#39;) . Program.__dict__ . mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;language&#39;: &#39;Python&#39;, &#39;say_hello&#39;: &lt;function __main__.Program.say_hello()&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Program&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Program&#39; objects&gt;, &#39;__doc__&#39;: None}) . Program.say_hello, getattr(Program, &#39;say_hello&#39;) . (&lt;function __main__.Program.say_hello()&gt;, &lt;function __main__.Program.say_hello()&gt;) . Program.say_hello() # we can of course call it since it&#39;s a callable . Hello from Python! . getattr(Program, &#39;say_hello&#39;)() . Hello from Python! . Functions can be defined for instances as well. . class Dog: # Class Attribute species = &#39;mammal&#39; # Initializer / Instance Attributes def __init__(self, name, age): self.name = name self.age = age # instance method def description(self): return &quot;{} is {} years old&quot;.format(self.name, self.age) # instance method def speak(self, sound): return &quot;{} says {}&quot;.format(self.name, sound) . Self is variable that binds methods to the object. Self will be covered in more detail when Descriptors is covered . # Instantiate the Dog object philo = Dog(&quot;Philo&quot;, 5) mikey = Dog(&quot;Mikey&quot;, 6) . philo.description() . &#39;Philo is 5 years old&#39; . mikey.description() . &#39;Mikey is 6 years old&#39; . Dog.__dict__ # Let&#39;s check the dict attributes of the main class . mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;species&#39;: &#39;mammal&#39;, &#39;__init__&#39;: &lt;function __main__.Dog.__init__(self, name, age)&gt;, &#39;description&#39;: &lt;function __main__.Dog.description(self)&gt;, &#39;speak&#39;: &lt;function __main__.Dog.speak(self, sound)&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Dog&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Dog&#39; objects&gt;, &#39;__doc__&#39;: None}) . Let&#39;s look at the dict attributes of the object . philo.__dict__ . {&#39;name&#39;: &#39;Philo&#39;, &#39;age&#39;: 5} . Callable Classes . Object’s of classes aren’t functions in Python. But they can be made callable, which allows you to treat them like functions in many cases. . If an object is callable it means you can use round parentheses () on it and pass function call arguments to it. Here’s an example of a callable object: . class Adder: def __init__(self, n): self.n = n def __call__(self, x): return self.n + x . plus_3 = Adder(3) . plus_3(4) . 7 . Behind the scenes, “calling” an object instance as a function attempts to execute the object’s call method. . Function attributes . Function attributes operate a little different to the data attributes discussed in previous post . class Person: def say_hello(): print(&#39;Hello!&#39;) . Person.say_hello . &lt;function __main__.Person.say_hello()&gt; . Person.say_hello() . Hello! . p = Person() . type(p.say_hello),type(Person.say_hello) . (method, function) . When a function is bound to the scope of an object it&#39;s called a method as discussed above . class Person: def say_hello(*args): print(&#39;say_hello args:&#39;, args) . Person.say_hello() . say_hello args: () . Calling say_hello from the class, just calls the function . p = Person() . p.say_hello() . say_hello args: (&lt;__main__.Person object at 0x7fa33497fb38&gt;,) . You can see that the object p was passed as an argument to the class function say_hello. . The obvious advantage is that we can now interact with instance attributes easily: . class Person: def set_name(instance_obj, new_name): setattr(instance_obj, &#39;name&#39;, new_name) . p = Person() . p.set_name(&#39;Alex&#39;) . p.__dict__ . {&#39;name&#39;: &#39;Alex&#39;} . You can also do like this . Person.set_name(p, &#39;John&#39;) . p.__dict__ . {&#39;name&#39;: &#39;John&#39;} . References . https://github.com/fbaptiste/python-deepdive - He has an excellent series of courses on Udemy which I would recommend | https://realpython.com/python3-object-oriented-programming/ Real Python is one of the best sites available to learn Python Programming . Their articles and blogs and video courses are well researched and really good for all levels of Python Programmers 3.https://dbader.org/blog/python-first-class-functions - Dan is one of the authors at RealPython who sometimes also blogs on his own sites |",
            "url": "https://averma12.github.io/CLL-Python/jupyter/2020/06/27/Classes-Methods-and-Callables.html",
            "relUrl": "/jupyter/2020/06/27/Classes-Methods-and-Callables.html",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Exceptions a deep dive",
            "content": "When you build a complex python pipeline or you deploy some python microservices in production , You need to make sure the code works perfectly. A small issue can bring all your efforts crashing down. A lot of times the error would be a simple syntax mistake which becomes easily apparent when the program runs in a few iterations. However there are many complicated errors that can arise. . For example , suppose you are interacting with an external API, let&#39;s take twitter. You call the api to give you results pertaining to a particular query. You then proceed to store the average sentiment across the number of posts you see in a day for your query. This goes all smooth for a few days but then the topic dies on twitter as all things do and you don&#39;t see any post. However your pipeline still takes the average which means it expects a number of posts , your machine learning model expects some text to calculate the sentiment and at the end you multiply the total sentiment score divided by the number of posts. You are now passing empty strings to your model and dividing by zero. Basically the system will crash. These issues are what&#39;s called exceptions . . Now picture another scenario. Say you run a company like Zomato . I&#39;m not going to tell you about zomato. You can check them out here . They also have an api through which you can get data of restaurants and reviews from their city here . So now you have multiple developers hitting your API for the data and you&#39;ve learnt from the mistakes and there isn&#39;t any exception like the one we encountered above. However now there is another unique situation. You can sometimes have too many calls and this is clogging your server. So you decide to get a bigger server or a cluster of servers but the popularity of your API means that the cost of maintenance is always high. So you decide to be a little creative. You bring out tiered plans. Based on how much people pay they are limited to extract that much data in a day. But when they exceed this amount you want to let them know that. So you raise and send an exception to them. . The above scenario are 2 situations where understanding of exceptions is really important to know as a programmer. In the coming post we will discuss exceptions in detail . Exceptions are a type of object so the concept of classes and single level inheritance comes into play as well. You can check the earlier post on that although understanding exceptions through this post can give a deeper understanding of single inheritance so you can start either way. So without further ado let&#39;s start on exceptions . Handling Exceptions . The first thing we&#39;ll look at is how to handle any exceptions that might arise in our code. There isn&#39;t any one elegant way of handling exception however a good practice is follows . Initially handle the exception by wrapping the code in a try/except block catching the blanket exception. | Once the exception is clear then we can proceed on handling the specific exception. This helps remove ambiguity from code as different errors need to be handled differently | Let&#39;s look at some examples . Let&#39;s start with some basic exception handling while reading lists and dictionaries . l = [1, 2, 3] l[4] #list only has 3 elements . IndexError Traceback (most recent call last) &lt;ipython-input-1-2c562ebcc971&gt; in &lt;module&gt; 1 l = [1, 2, 3] -&gt; 2 l[4] #list only has 3 elements IndexError: list index out of range . The exception thrown here is IndexError . So let&#39;s now handle the error via an exception . l = [1,2,3] # can declare this outside as its not something that causes errors try: l[4] except IndexError as e: # its convention to alias any exception with e. In practice anything can be used print(e) . list index out of range . The message that gets printed is the error that proceeds the IndexError key above . l = [1,2,3] # can declare this outside as its not something that causes errors try: l[4] except IndexError as e: print(0) . 0 . A quick aside. You can even handle exceptions using the bare except syntax . try: 1 / 0 except: print(&#39;exception occurred&#39;) . exception occurred . In practice this doesn&#39;t help at all as in your pipeline you won&#39;t learn anything about your error . Let&#39;s look at a dictionary and handle exceptions using that. The dictionary you will be seeing is a dictionary that&#39;s been scraped from amazon regarding a product. Web scraping is another topic in itself but reading a dictionary scraped from the internet is a really good real life example of how to handle errors while scraping So let&#39;s look at that . data = {&#39;name&#39;: &#39;Uno Fast Fun&#39;, &#39;source_url&#39;: &#39;https://www.amazon.in/UNO-42003-Uno-Fast-Fun/dp/B00004TZY8&#39;, &#39;price&#39;: &#39;₹ 149.00&#39;, &#39;images&#39;: [&#39;https://images-na.ssl-images-amazon.com/images/I/31PAL9s5S-L.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/516YvMIqL8L.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/513Ko-uHFXL.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/5152b4jUxmL.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/41SJFXFzptL.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/51Q8FYew72L.jpg&#39;, &#39;https://images-na.ssl-images-amazon.com/images/I/51aCIYAIWoL.jpg&#39;], &#39;stock_image&#39;: &#39;https://images-na.ssl-images-amazon.com/images/I/51aCIYAIWoL.jpg&#39;, &#39;seller&#39;: &#39;Sold by R &amp; R (4.2 out of 5 stars | 279 ratings).&#39;, &#39;rating&#39;: &#39;4.2 out of 5 stars&#39;, &#39;rating_count&#39;: 7210, &#39;features&#39;: [&#39;Minimum Recommended Age : 4 Years&#39;, &#39;Battries not required&#39;, &#39;See why this color coded card game is such a popular brand of family game&#39;, &#39;Be the first player or team to score 500 points&#39;, &#39;Points are scored by being the first to rid yourself of all the cards in your hand before your opponents&#39;], &#39;description&#39;: &quot;America&#39;s number one card game, UNO offers hours of fun. It&#39;s easy to learn, always unpredictable and never dull. It can be played with 2 to 10 players, individually or in teams and it can even be educational, teaching younger kids number recognition. Add fun and excitement to your family time by playing the Mattel UNO fast fun. This entertaining card game will surely make family get-togethers engaging and interactive. Just like any other card game, you need to focus and strategise your moves to challenge all other players. It is a great exercise to help build up your child&#39;s interactive and interpersonal skills. You can carry this compact Mattel Uno cards game anywhere and keep the boredom away. Ideal to play while your travel long distance in the car, during boring afternoons or as a party wrap-up game. Exciting and easy to play, the Mattel Uno game can be played by 2 to 10 players and is suitable for children aged 7 years and above.Spend quality time with your family while you play this Mattel UNO card game. This UNO card game involves individual players or teams, who have be the first to score 500 points. You have to play the colour coded cards from your hand, which would either match the number or colour of the card that lies on the top of the discarded cards. If your do not have either match, you simply have to pull cards from the fresh deck until you find the match. Piling cards in your hand is a losing site, which means you have to successfully rid yourself of the cards to win this game. When left with only one card in hand, you have to yell UNO and make others jealous.&quot;, &#39;productInfo&#39;: [{&#39;name&#39;: &#39;Educational Objective(s)&#39;, &#39;value&#39;: &#39;Reading&#39;}, {&#39;name&#39;: &#39;Main Language(s)&#39;, &#39;value&#39;: &#39;English translation, English&#39;}, {&#39;name&#39;: &#39;Model Number&#39;, &#39;value&#39;: &#39;42003&#39;}, {&#39;name&#39;: &#39;Number of Game Players&#39;, &#39;value&#39;: &#39;2-10&#39;}, {&#39;name&#39;: &#39;Number of Puzzle Pieces&#39;, &#39;value&#39;: &#39;1&#39;}, {&#39;name&#39;: &#39;Assembly Required&#39;, &#39;value&#39;: &#39;No&#39;}, {&#39;name&#39;: &#39;Scale&#39;, &#39;value&#39;: &#39;1/32&#39;}, {&#39;name&#39;: &#39;Batteries Required&#39;, &#39;value&#39;: &#39;No&#39;}, {&#39;name&#39;: &#39;Batteries Included&#39;, &#39;value&#39;: &#39;No&#39;}, {&#39;name&#39;: &#39;Material Type(s)&#39;, &#39;value&#39;: &#39;other-materials&#39;}, {&#39;name&#39;: &#39;Remote Control Included?&#39;, &#39;value&#39;: &#39;No&#39;}, {&#39;name&#39;: &#39;Color&#39;, &#39;value&#39;: &#39;multi&#39;}, {&#39;name&#39;: &#39;Item Weight&#39;, &#39;value&#39;: &#39;90.7 g&#39;}, {&#39;name&#39;: &#39;Product Dimensions&#39;, &#39;value&#39;: &#39;1.9 x 17.8 x 12.7 cm&#39;}, {&#39;name&#39;: &#39;Item model number&#39;, &#39;value&#39;: &#39;42003&#39;}, {&#39;name&#39;: &quot;Manufacturer&#39;s Minimum Suggested Age (years)&quot;, &#39;value&#39;: &#39;7&#39;}, {&#39;name&#39;: &#39;ASIN&#39;, &#39;value&#39;: &#39;B00004TZY8&#39;}, {&#39;name&#39;: &#39;Customer Reviews&#39;, &#39;value&#39;: &#39;4.2 out of 5 stars7,210 customer ratings&#39;}, {&#39;name&#39;: &#39;Amazon Bestsellers Rank&#39;, &#39;value&#39;: &#39;#983 in Toys &amp; Games (See Top 100 in Toys &amp; Games) #35 in Card Games&#39;}, {&#39;name&#39;: &#39;Date First Available&#39;, &#39;value&#39;: &#39;9 April 2012&#39;}]} . def get_name(data:dict) -&gt; str: name = data[&quot;name&quot;] return name . get_name(data) . &#39;Uno Fast Fun&#39; . However it can be a little risky to directly query dictionaries this way . def get_name(data:dict) -&gt; str: name = data[&quot;product_name&quot;] return name . get_name(data) . KeyError Traceback (most recent call last) &lt;ipython-input-9-a9f5ada1933a&gt; in &lt;module&gt; -&gt; 1 get_name(data) &lt;ipython-input-8-d4a208ffbab7&gt; in get_name(data) 1 def get_name(data:dict) -&gt; str: -&gt; 2 name = data[&#34;product_name&#34;] 3 return name KeyError: &#39;product_name&#39; . Dictionaries throw a KeyError when an incorrect key is called. A good way to do it would be to wrap the indexing in a try except block catching the KeyError . def get_name(data:dict) -&gt; str: try: name = data[&quot;product_name&quot;] except KeyError as e: print(e) return &quot;Incorrect Key Entered. Please check key&quot; return name . get_name(data) #as you can see error is handled . &#39;product_name&#39; . &#39;Incorrect Key Entered. Please check key&#39; . Of course Dictionaries handle all this implicitly using the get method. Yes Dictionaries are instances of the dictionary class. . def get_name(data:dict) -&gt; str: try: name = data.get(&quot;product_name&quot;,&quot;&quot;) except KeyError as e: print(e) return &quot;Incorrect Key Entered. Please check key&quot; return name . get_name(data) # as you can see get handles this and keyerror isn&#39;t called . &#39;&#39; . Of course there&#39;s also one other thing that isn&#39;t often implemented but does come with the try except statements is the finally block. Whilst the exception block is executed only if there is an exception. The finally block is executed regardless. . def get_name(data:dict) -&gt; str: try: name = data.get(&quot;product_name&quot;,&quot;&quot;) except KeyError as e: print(e) return &quot;Incorrect Key Entered. Please check key&quot; finally: link = data.get(&quot;source_url&quot;) print(link) return name . get_name(data) . https://www.amazon.in/UNO-42003-Uno-Fast-Fun/dp/B00004TZY8 . &#39;&#39; . Raising Exceptions . Let&#39;s go to the second case where we raise exceptions. Raising exceptions is an effective way to halt the execution of the program when there are incorrect params entered for example or when there is a doubt that certain values obtained or calculated may end up &quot;breaking&quot; the code/system database etc. . # Let&#39;s get the name,description,ratings,seller_info,ratings . def get_details(product): obj = {} if product: obj[&quot;product_name&quot;] = product.get(&quot;name&quot;) obj[&quot;price&quot;] = product.get(&quot;price&quot;) obj[&quot;description&quot;] = product.get(&quot;description&quot;) obj[&quot;seller&quot;] = product.get(&quot;seller&quot;) obj[&quot;features&quot;] = product.get(&quot;features&quot;) # to get asin we need to loop in productInfo key for item in product[&quot;productInfo&quot;]: if item[&quot;name&quot;] == &quot;ASIN&quot;: obj[&quot;unique_id&quot;] = item[&quot;value&quot;] return obj . get_details(data) . {&#39;product_name&#39;: &#39;Uno Fast Fun&#39;, &#39;price&#39;: &#39;₹ 149.00&#39;, &#39;description&#39;: &#34;America&#39;s number one card game, UNO offers hours of fun. It&#39;s easy to learn, always unpredictable and never dull. It can be played with 2 to 10 players, individually or in teams and it can even be educational, teaching younger kids number recognition. Add fun and excitement to your family time by playing the Mattel UNO fast fun. This entertaining card game will surely make family get-togethers engaging and interactive. Just like any other card game, you need to focus and strategise your moves to challenge all other players. It is a great exercise to help build up your child&#39;s interactive and interpersonal skills. You can carry this compact Mattel Uno cards game anywhere and keep the boredom away. Ideal to play while your travel long distance in the car, during boring afternoons or as a party wrap-up game. Exciting and easy to play, the Mattel Uno game can be played by 2 to 10 players and is suitable for children aged 7 years and above.Spend quality time with your family while you play this Mattel UNO card game. This UNO card game involves individual players or teams, who have be the first to score 500 points. You have to play the colour coded cards from your hand, which would either match the number or colour of the card that lies on the top of the discarded cards. If your do not have either match, you simply have to pull cards from the fresh deck until you find the match. Piling cards in your hand is a losing site, which means you have to successfully rid yourself of the cards to win this game. When left with only one card in hand, you have to yell UNO and make others jealous.&#34;, &#39;seller&#39;: &#39;Sold by R &amp; R (4.2 out of 5 stars | 279 ratings).&#39;, &#39;features&#39;: [&#39;Minimum Recommended Age : 4 Years&#39;, &#39;Battries not required&#39;, &#39;See why this color coded card game is such a popular brand of family game&#39;, &#39;Be the first player or team to score 500 points&#39;, &#39;Points are scored by being the first to rid yourself of all the cards in your hand before your opponents&#39;], &#39;unique_id&#39;: &#39;B00004TZY8&#39;} . Now we&#39;ve managed to extract the values we wanted to extract. Now suppose we wanted to get seller ratings specifically from the seller key and we want to raise an error if the seller has less than 4.5 stars (Yikes) a very high threshold but still let&#39;s go with it. Now to extract ratings from seller key, we will be using regular expressions. Regular expressions is a very important and underrated topic in python and will be covered later but for now just assume that there is a function that extracts seller rating from seller key . First Let&#39;s import re module for this . import re . def get_seller_rating(seller:str) -&gt; str: seller_ratings = re.findall(&quot;([0-9]+[.][0-9]*| d+)&quot;,seller) seller_ratings = seller_ratings[0] return float(seller_ratings) . #Let&#39;s test it . get_seller_rating(&quot;Sold by R &amp; R (4.2 out of 5 stars | 279 ratings).&quot;) . 4.2 . Let&#39;s modify our function now . def get_details(product): try: obj = {} if product: obj[&quot;product_name&quot;] = product.get(&quot;name&quot;) obj[&quot;price&quot;] = product.get(&quot;price&quot;) obj[&quot;description&quot;] = product.get(&quot;description&quot;) obj[&quot;seller&quot;] = product.get(&quot;seller&quot;) obj[&quot;features&quot;] = product.get(&quot;features&quot;) seller_rating = get_seller_rating(product.get(&quot;seller&quot;)) if seller_rating &lt; 4.5: raise ValueError(&quot;Seller rating less than 4.5&quot;) else: obj[&quot;seller_rating&quot;] = seller_rating # to get asin we need to loop in productInfo key for item in product[&quot;productInfo&quot;]: if item[&quot;name&quot;] == &quot;ASIN&quot;: obj[&quot;unique_id&quot;] = item[&quot;value&quot;] return obj except ValueError as e: print(e) return {} . get_details(data) . Seller rating less than 4.5 . {} . As you can see we have raised Exception when the value is less than the expected value .",
            "url": "https://averma12.github.io/CLL-Python/2020/06/27/Exception-Handling.html",
            "relUrl": "/2020/06/27/Exception-Handling.html",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Initialization",
            "content": "This is brief revision of initialization. Initialization has already been shown in previous posts. So let&#39;s look back at what initialization is exactly . When an instance/object of a class is created 2 important steps happen . Object instance is created | Object instance is initialized | Object is created when the dunder new method is called. If not specified on a class the default one is called. After that the dunder init is called . This initializes all the attributes and methods that are bound to the object . . For this example let&#39;s take at an example from a famous Deep Learning Library fastai. Fastai is one of the .",
            "url": "https://averma12.github.io/CLL-Python/2020/06/27/Classes-Initialization-and-Dynamic-Attributes.html",
            "relUrl": "/2020/06/27/Classes-Initialization-and-Dynamic-Attributes.html",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://averma12.github.io/CLL-Python/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://averma12.github.io/CLL-Python/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://averma12.github.io/CLL-Python/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://averma12.github.io/CLL-Python/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}